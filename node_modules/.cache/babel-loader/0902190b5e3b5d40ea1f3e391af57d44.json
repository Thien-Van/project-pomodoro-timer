{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Biungowich\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\addedCode\\\\SessionInfo.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction SessionInfo({\n  session,\n  focusDuration,\n  breakDuration\n}) {\n  if (session === null) return null;\n\n  const displayCurrent = () => {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") return minutesToDuration(focusDuration);\n    return minutesToDuration(breakDuration);\n  };\n\n  const progress = () => {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") {\n      return (focusDuration * 60 - (session === null || session === void 0 ? void 0 : session.timeRemaining)) / (focusDuration * 0.6);\n    }\n\n    return (breakDuration * 60 - (session === null || session === void 0 ? void 0 : session.timeRemaining)) / (breakDuration * 0.6);\n  };\n\n  const progressNum = progress();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, session === null || session === void 0 ? void 0 : session.label, \" for \", displayCurrent(), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressNum // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressNum}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default SessionInfo;","map":{"version":3,"sources":["C:/Users/Biungowich/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/addedCode/SessionInfo.js"],"names":["React","useState","minutesToDuration","secondsToDuration","SessionInfo","session","focusDuration","breakDuration","displayCurrent","label","progress","timeRemaining","progressNum","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA;AAA1B,CAArB,EAAgE;AAC9D,MAAIF,OAAO,KAAK,IAAhB,EAAsB,OAAO,IAAP;;AAEtB,QAAMG,cAAc,GAAG,MAAM;AAC3B,QAAI,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,KAAT,MAAmB,UAAvB,EAAmC,OAAOP,iBAAiB,CAACI,aAAD,CAAxB;AACnC,WAAOJ,iBAAiB,CAACK,aAAD,CAAxB;AACD,GAHD;;AAKA,QAAMG,QAAQ,GAAG,MAAM;AACrB,QAAI,CAAAL,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEI,KAAT,MAAmB,UAAvB,EAAmC;AACjC,aACE,CAACH,aAAa,GAAG,EAAhB,IAAqBD,OAArB,aAAqBA,OAArB,uBAAqBA,OAAO,CAAEM,aAA9B,CAAD,KAAiDL,aAAa,GAAG,GAAjE,CADF;AAGD;;AACD,WACE,CAACC,aAAa,GAAG,EAAhB,IAAqBF,OAArB,aAAqBA,OAArB,uBAAqBA,OAAO,CAAEM,aAA9B,CAAD,KAAiDJ,aAAa,GAAG,GAAjE,CADF;AAGD,GATD;;AAWA,QAAMK,WAAW,GAAGF,QAAQ,EAA5B;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,OADH,aACGA,OADH,uBACGA,OAAO,CAAEI,KADZ,WACwBD,cAAc,EADtC,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,iBAAiB,CAACE,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEM,aAAV,CADpB,eANF,CADF,CAFF,eAcE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeD,WALjB,CAK8B;AAL9B;AAME,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAG,GAAEF,WAAY;AAAxB,KANT,CAMuC;AANvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAdF,CADF;AA+BD;;AAED,eAAeR,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction SessionInfo({ session, focusDuration, breakDuration }) {\r\n  if (session === null) return null;\r\n\r\n  const displayCurrent = () => {\r\n    if (session?.label === \"Focusing\") return minutesToDuration(focusDuration);\r\n    return minutesToDuration(breakDuration);\r\n  };\r\n\r\n  const progress = () => {\r\n    if (session?.label === \"Focusing\") {\r\n      return (\r\n        (focusDuration * 60 - session?.timeRemaining) / (focusDuration * 0.6)\r\n      );\r\n    }\r\n    return (\r\n      (breakDuration * 60 - session?.timeRemaining) / (breakDuration * 0.6)\r\n    );\r\n  };\r\n\r\n  const progressNum = progress();\r\n  return (\r\n    <div>\r\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {session?.label} for {displayCurrent()} minutes\r\n          </h2>\r\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session?.timeRemaining)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={progressNum} // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width: `${progressNum}%` }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SessionInfo;\r\n"]},"metadata":{},"sourceType":"module"}